package ak;

import ak.database.DBconnection;
import ak.loans.LoanRequest;
import ak.loans.LoanRequestManager;
import org.junit.jupiter.api.*;

import java.sql.*;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class LoanRequestManagerTest {

    private static Connection h2;
    private LoanRequestManager lrManager;

    /*
     * -------------------------------------------------
     * Boot an in‑memory H2 database for all tests
     * -------------------------------------------------
     */
    @BeforeAll
    static void initDb() throws Exception {
        h2 = DriverManager.getConnection("jdbc:h2:mem:loanreq;MODE=PostgreSQL");
        DBconnection.setTestConnection(h2);
        createSchema();
    }

    @AfterAll
    static void closeDb() throws Exception {
        h2.close();
    }

    private static void createSchema() throws SQLException {
        try (Statement st = h2.createStatement()) {
            st.execute("""
                        CREATE TABLE IF NOT EXISTS loan_requests (
                          id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          account_number VARCHAR(20),
                          loan_amount DECIMAL(15,2),
                          loan_reason VARCHAR(255),
                          status VARCHAR(20)
                        )
                    """);
        }
    }

    @BeforeEach
    void setUp() {
        lrManager = new LoanRequestManager();
    }

    @AfterEach
    void clearTable() throws Exception {
        try (Statement st = h2.createStatement()) {
            st.execute("TRUNCATE TABLE loan_requests");
        }
    }

    /*
     * -------------------------------------------------
     * 1. Submit request → row persisted
     * -------------------------------------------------
     */
    @Test
    void submitLoanRequest_persistsAndReturnsTrue() {
        assertTrue(lrManager.submitLoanRequest("ACC123", 5_000, "Education"));

        try (Statement st = h2.createStatement();
                ResultSet rs = st.executeQuery("SELECT COUNT(*) FROM loan_requests")) {
            rs.next();
            assertEquals(1, rs.getInt(1));
        } catch (SQLException e) {
            fail("Database error: " + e.getMessage());
        }
    }

    /*
     * -------------------------------------------------
     * 2. getAllLoanRequests returns list
     * -------------------------------------------------
     */
    @Test
    void getAllLoanRequests_returnsNonEmpty() {
        lrManager.submitLoanRequest("ACC999", 3_000, "Car");
        List<LoanRequest> list = lrManager.getAllLoanRequests();

        assertEquals(1, list.size());
        assertEquals("ACC999", list.get(0).getAccountNumber());
    }

    /*
     * -------------------------------------------------
     * 3. Update status branch
     * -------------------------------------------------
     */
    @Test
    void updateLoanRequestStatus_updatesRow() throws SQLException {
        lrManager.submitLoanRequest("ACC777", 2_500, "Medical");

        // fetch generated id
        int id;
        try (Statement st = h2.createStatement();
                ResultSet rs = st.executeQuery("SELECT id FROM loan_requests LIMIT 1")) {
            rs.next();
            id = rs.getInt(1);
        }

        assertTrue(lrManager.updateLoanRequestStatus(String.valueOf(id), "Approved"));

        LoanRequest after = lrManager.getAllLoanRequests().get(0);
        assertEquals("Approved", after.getStatus());
    }
}
